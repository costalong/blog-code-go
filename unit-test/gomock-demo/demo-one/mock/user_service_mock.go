// Code generated by MockGen. DO NOT EDIT.
// Source: user_service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserSrv is a mock of UserSrv interface.
type MockUserSrv struct {
	ctrl     *gomock.Controller
	recorder *MockUserSrvMockRecorder
}

// MockUserSrvMockRecorder is the mock recorder for MockUserSrv.
type MockUserSrvMockRecorder struct {
	mock *MockUserSrv
}

// NewMockUserSrv creates a new mock instance.
func NewMockUserSrv(ctrl *gomock.Controller) *MockUserSrv {
	mock := &MockUserSrv{ctrl: ctrl}
	mock.recorder = &MockUserSrvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSrv) EXPECT() *MockUserSrvMockRecorder {
	return m.recorder
}

// GetUserById mocks base method.
func (m *MockUserSrv) GetUserById(id int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserSrvMockRecorder) GetUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserSrv)(nil).GetUserById), id)
}

// Update mocks base method.
func (m *MockUserSrv) Update(id int, data interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserSrvMockRecorder) Update(id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserSrv)(nil).Update), id, data)
}
